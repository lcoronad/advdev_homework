// Jenkinsfile for MLBParks
// Set the tag for the development image: version + build number
def devTag      = "0.0-0"
// Set the tag for the production image: version
def prodTag     = "0.0"
def artifact	= ""
podTemplate(
  label: "skopeo-pod",
  cloud: "openshift",
  inheritFrom: "maven",
  containers: [
    containerTemplate(
      name: "jnlp",
      image: "docker-registry.default.svc:5000/${GUID}-jenkins/jenkins-slave-appdev",
      resourceRequestMemory: "1Gi",
      resourceLimitMemory: "2Gi"
    )
  ]
) {
  node('skopeo-pod') {
    echo "GUID: ${GUID}"
    echo "CLUSTER: ${CLUSTER}"

    // Your Pipeline Code goes here. Make sure to use the ${GUID} and ${CLUSTER} parameters where appropriate
    // You need to build the application in directory `MLBParks`.
    // Also copy "../nexus_settings.xml" to your build directory
    // and replace 'GUID' in the file with your ${GUID} to point to >your< Nexus instance
    // Checkout Source Code
    stage('Checkout Source') {
     
	  checkout scm
	
          sh "pwd"

          dir("MLBParks"){
	     sh "pwd"
	     def pom = 'pom.xml'
             def version = getVersionFromPom(pom)
             // TBD: Set the tag for the development image: version + build number.
             // Example: def devTag  = "0.0-0"
             devTag  = "${version}-" + currentBuild.number
             // TBD: Set the tag for the production image: version
             // Example: def prodTag = "0.0"
             prodTag = "${version}"
	     artifact = getArtifactIdFromPom(pom)
	  }
	  echo "Devtag: ${devTag}"       	
    }
   //end of the checout stage
   stage('Build App') {
     dir("MLBParks"){ 
       echo "Building version ${devTag}"
       sh "mvn -s ../nexus_settings.xml clean package -DskipTests=true"
       echo "Building complete version ${devTag}"
     }
   }
  //End of the build step
  stage('Test App') {
   dir("MLBParks"){ 
    parallel(
      'Unit Tests': {
      stage('Unit Tests') {         
	echo "Running Unit Tests"
	sh "mvn -s ../nexus_settings.xml test"
       	step([$class: 'JUnitResultArchiver', testResults: '**/target/surefire-reports/TEST-*.xml', allowEmptyResults: true])
      }},
      'Code Coverage Tests': {
      stage('Code Coverage Tests'){
	echo "Running Code Analysis"
	sh "mvn -s ../nexus_settings.xml test sonar:sonar -Dsonar.host.url=http://sonarqube.${GUID}-sonarqube.svc.cluster.local:9000/ -Dsonar.projectName=${JOB_BASE_NAME} -Dsonar.projectVersion=${devTag}"	
      }}
    )
   }        
  }
  //End of the test stage
  stage('Publish to Nexus') {
    echo "Publish to Nexus"	  
    dir("MLBParks"){
      sh "mvn -s ../nexus_settings.xml deploy -DskipTests=true -DaltDeploymentRepository=nexus::default::http://nexus3.${GUID}-nexus.svc.cluster.local:8081/repository/releases"
    }
  }
  //End of the publish stage
  stage('Build and Tag OpenShift Image') {
     echo "Building OpenShift container image ${artifact}:${devTag}"
     openshift.withCluster() {
      openshift.withProject("${GUID}-parks-dev") {
        openshift.selector("bc", "mlbparks").startBuild("--from-file=http://nexus3.${GUID}-nexus.svc.cluster.local:8081/repository/releases/com/openshift/evg/roadshow/${artifact}/${prodTag}/${artifact}-${prodTag}.war", "--wait=true")
        openshift.tag("${artifact}:latest", "${artifact}:${devTag}")
      }
    }
  }
  //End of the tag image stage
  stage('Deploy to Dev') {
    echo "Deploy container image to Development Project"
    openshift.withCluster() {
     openshift.withProject("${GUID}-parks-dev") {
       openshift.set("image", "dc/mlbparks", "mlbparks=docker-registry.default.svc:5000/${GUID}-parks-dev/${artifact}:${devTag}")

       // Deploy the application.
       openshift.selector("dc", "mlbparks").rollout().latest();

       // Wait for application to be deployed
       def dc = openshift.selector("dc", "mlbparks").object()
       def dc_version = dc.status.latestVersion
       def rc = openshift.selector("rc", "mlbparks-${dc_version}").object()	

       echo "Waiting for ReplicationController mlbparks-${dc_version} to be ready"
       while (rc.spec.replicas != rc.status.readyReplicas) {
          sleep 5
          rc = openshift.selector("rc", "mlbparks-${dc_version}").object()
       }
       echo "ReplicationController mlbparks-${dc_version} ready"
     }
    }
  }
 }
}

// Convenience Functions to read variables from the pom.xml
// Do not change anything below this line.
def getVersionFromPom(pom) {
  def matcher = readFile(pom) =~ '<version>(.+)</version>'
  matcher ? matcher[0][1] : null
}
def getGroupIdFromPom(pom) {
  def matcher = readFile(pom) =~ '<groupId>(.+)</groupId>'
  matcher ? matcher[0][1] : null
}
def getArtifactIdFromPom(pom) {
  def matcher = readFile(pom) =~ '<artifactId>(.+)</artifactId>'
  matcher ? matcher[0][1] : null
}
