// Jenkinsfile for NationalParks
// Set the tag for the development image: version + build number
def devTag      = "0.0-0"
// Set the tag for the production image: version
def prodTag     = "0.0"
def artifact	= ""
def destApp = "nationalparks-blue" 
def activeApp = "nationalparks-green"
podTemplate(
  label: "skopeo-pod",
  cloud: "openshift",
  inheritFrom: "maven",
  containers: [
    containerTemplate(
      name: "jnlp",
      image: "docker-registry.default.svc:5000/${GUID}-jenkins/jenkins-slave-appdev",
      resourceRequestMemory: "1Gi",
      resourceLimitMemory: "2Gi",
      resourceRequestCpu: "750Mi",
      resourceLimitCpu: "750Mi"
    )
  ]
) {
  node('skopeo-pod') {
    echo "GUID: ${GUID}"
    echo "CLUSTER: ${CLUSTER}"

    // Your Pipeline Code goes here. Make sure to use the ${GUID} and ${CLUSTER} parameters where appropriate
    // You need to build the application in directory `Nationalparks`.
    // Also copy "../nexus_settings.xml" to your build directory
    // and replace 'GUID' in the file with your ${GUID} to point to >your< Nexus instance
     stage('Checkout Source') {    
       checkout scm
       dir("Nationalparks"){
	 def pom = 'pom.xml'
         def version = getVersionFromPom(pom)
         // TBD: Set the tag for the development image: version + build number.
         // Example: def devTag  = "0.0-0"
         devTag  = "${version}-" + currentBuild.number
         // TBD: Set the tag for the production image: version
         // Example: def prodTag = "0.0"
         prodTag = "${version}"
	 artifact = getArtifactIdFromPom(pom)
       }
      echo "Devtag: ${devTag}"       	
    }
   //end of the checkout stage
   stage('Build App') {
     dir("Nationalparks"){ 
       echo "Building version ${devTag}"
       sh "mvn -s ../nexus_settings.xml clean package -DskipTests=true"
       echo "Building complete version ${devTag}"
     }
   }
  //End of the build step
  stage('Test App') {
   dir("Nationalparks"){ 
    parallel(
      'Unit Tests': {
      stage('Unit Tests') {         
	echo "Running Unit Tests"
	sh "mvn -s ../nexus_settings.xml test"
       	step([$class: 'JUnitResultArchiver', testResults: '**/target/surefire-reports/TEST-*.xml', allowEmptyResults: true])
      }},
      'Code Coverage Tests': {
      stage('Code Coverage Tests'){
	echo "Running Code Analysis"
	sh "mvn -s ../nexus_settings.xml test sonar:sonar -Dsonar.host.url=http://sonarqube.${GUID}-sonarqube.svc.cluster.local:9000/ -Dsonar.projectName=${JOB_BASE_NAME} -Dsonar.projectVersion=${devTag}"	
      }}
    )
   }        
  }
  //End of the test stage
  stage('Publish to Nexus') {
    echo "Publish to Nexus"	  
    dir("Nationalparks"){
      sh "mvn -s ../nexus_settings.xml deploy -DskipTests=true -DaltDeploymentRepository=nexus::default::http://nexus3.${GUID}-nexus.svc.cluster.local:8081/repository/releases"
    }
  }
  //End of the publish stage
  stage('Build and Tag OpenShift Image') {
     echo "Building OpenShift container image ${artifact}:${devTag}"
     openshift.withCluster() {
      openshift.withProject("${GUID}-parks-dev") {
        openshift.selector("bc", "nationalparks").startBuild("--from-file=http://nexus3.${GUID}-nexus.svc.cluster.local:8081/repository/releases/com/openshift/evg/roadshow/${artifact}/${prodTag}/${artifact}-${prodTag}.jar", "--wait=true")
        openshift.tag("${artifact}:latest", "${artifact}:${devTag}")
      }
    }
  }
  //End of the tag image stage
  stage('Deploy to Dev') {
    echo "Deploy container image to Development Project"
    openshift.withCluster() {
     openshift.withProject("${GUID}-parks-dev") {
       openshift.set("image", "dc/nationalparks", "nationalparks=docker-registry.default.svc:5000/${GUID}-parks-dev/${artifact}:${devTag}")

       // Deploy the application.
       openshift.selector("dc", "nationalparks").rollout().latest();

       // Wait for application to be deployed
       def dc = openshift.selector("dc", "nationalparks").object()
       def dc_version = dc.status.latestVersion
       def rc = openshift.selector("rc", "nationalparks-${dc_version}").object()	

       echo "Waiting for ReplicationController nationalparks-${dc_version} to be ready"
       while (rc.spec.replicas != rc.status.readyReplicas) {
          sleep 5
          rc = openshift.selector("rc", "nationalparks-${dc_version}").object()
       }
       echo "ReplicationController nationalparks-${dc_version} ready"
     }
    }
  }
  //End of the deploy stage
  stage('Integration Tests') {
    echo "Running Integration Tests"
    echo "Requesting nationalparks service state"
    def devResponse = sh(returnStdout: true, script: "curl nationalparks.${GUID}-parks-dev.svc.cluster.local:8080/ws/healthz/").trim()
    echo "Dev National Parks Response: " + devResponse
    if (devResponse.contains("OK")) {
     echo "*** National Parks (Dev) validated successfully."
    }
    else {
     error("NationalParks (Dev) returned unexpected response.")
    }
    echo "Requesting nationalparks service status"
    devResponse = sh(returnStdout: true, script: "curl nationalparks.${GUID}-parks-dev.svc.cluster.local:8080/ws/info/").trim()
    echo "Dev National Parks Response 2: " + devResponse
    if (devResponse.contains('{"id":"nationalparks","displayName":"National Parks (Dev)","center":{"latitude":"47.039304","longitude":"14.505178"},"zoom":4}')) {
     echo "*** National Parks (Dev) 2 validated successfully."
    }
    else {
     error("NationalParks (Dev) 2 returned unexpected response.")
    }   
  }
  // End of the Integration test stage
  stage('Copy Image to Nexus Docker Registry') {
    echo "Copy image to Nexus Docker Registry"
    sh "skopeo copy --src-tls-verify=false --dest-tls-verify=false --src-creds openshift:\$(oc whoami -t) --dest-creds admin:admin123 docker://docker-registry.default.svc.cluster.local:5000/${GUID}-parks-dev/${artifact}:${devTag} docker://nexus3-registry.${GUID}-nexus.svc.cluster.local:5000/${artifact}:${devTag}"
    
    openshift.withCluster() {
     openshift.withProject("${GUID}-parks-prod") {
	openshift.tag("${GUID}-parks-dev/${artifact}:${devTag}", "${GUID}-parks-dev/${artifact}:${prodTag}")
     }
    }
  }
  //End ot the nexus image publish stage
  stage('Blue/Green Production Deployment') {
     echo "Blue/Green Deployment"
    
     openshift.withCluster() {
      openshift.withProject("${GUID}-parks-prod") {
	 try{
	     def svc = openshift.selector("svc/${destApp}").object()
	     activeApp = svc.spec.selector.app
	     destApp = "nationalparks-green"
         } catch ( e ) {
	    echo "Service not found, using mlbparks-blue as new deployment"
         }
	 echo "Active Application:      " + activeApp
         echo "Destination Application: " + destApp
         
         // Update the Image on the Production Deployment Config
         def dc = openshift.selector("dc/${destApp}").object()
         dc.spec.template.spec.containers[0].image="docker-registry.default.svc:5000/${GUID}-parks-dev/${artifact}:${prodTag}"
         openshift.apply(dc)
         
         // Deploy the inactive application.
         openshift.selector("dc", "${destApp}").rollout().latest();
      
         // Wait for application to be deployed
         def dc_prod = openshift.selector("dc", "${destApp}").object()
         def dc_version = dc_prod.status.latestVersion
         def rc_prod = openshift.selector("rc", "${destApp}-${dc_version}").object()
         echo "Waiting for ${destApp} to be ready"
         while (rc_prod.spec.replicas != rc_prod.status.readyReplicas) {
            sleep 5
            rc_prod = openshift.selector("rc", "${destApp}-${dc_version}").object()
         }
      }
     }
  }
  //End ot the Blue/Green Production Deployment
  stage('Switch over to new Version') {
    echo "Executing production switch"
    openshift.withCluster() {
      openshift.withProject("${GUID}-parks-prod") {
        //Actual service deletion
	openshift.selector("svc", "${activeApp}").delete()

	//Actual Deployment config
	def dc = openshift.selector("dc", "${destApp}")
	dc.expose("--port=8080", "--labels=type=parksmap-backend", "-n ${GUID}-parks-prod")
      }
    }
  }
 }
}

// Convenience Functions to read variables from the pom.xml
// Do not change anything below this line.
def getVersionFromPom(pom) {
  def matcher = readFile(pom) =~ '<version>(.+)</version>'
  matcher ? matcher[0][1] : null
}
def getGroupIdFromPom(pom) {
  def matcher = readFile(pom) =~ '<groupId>(.+)</groupId>'
  matcher ? matcher[0][1] : null
}
def getArtifactIdFromPom(pom) {
  def matcher = readFile(pom) =~ '<artifactId>(.+)</artifactId>'
  matcher ? matcher[0][1] : null
}
