// Jenkinsfile for ParksMap
// Set the tag for the development image: version + build number
def devTag      = "0.0-0"
// Set the tag for the production image: version
def prodTag     = "0.0"
def artifact	= ""
def destApp     = "parksmap-blue"
def activeApp   = ""
podTemplate(
  label: "skopeo-pod",
  cloud: "openshift",
  inheritFrom: "maven",
  containers: [
    containerTemplate(
      name: "jnlp",
      image: "docker-registry.default.svc:5000/${GUID}-jenkins/jenkins-slave-appdev",
      resourceRequestMemory: "1Gi",
      resourceLimitMemory: "2Gi"
    )
  ]
) {
  node('skopeo-pod') {
    echo "GUID: ${GUID}"
    echo "CLUSTER: ${CLUSTER}"

    // Your Pipeline Code goes here. Make sure to use the ${GUID} and ${CLUSTER} parameters where appropriate
    // You need to build the application in directory `ParksMap`.
    // Also copy "../nexus_settings.xml" to your build directory
    // and replace 'GUID' in the file with your ${GUID} to point to >your< Nexus instance
    stage('Checkout Source') {    
       checkout scm
       dir("ParksMap"){
	 def pom = 'pom.xml'
         def version = getVersionFromPom(pom)
         // TBD: Set the tag for the development image: version + build number.
         // Example: def devTag  = "0.0-0"
         devTag  = "${version}-" + currentBuild.number
         // TBD: Set the tag for the production image: version
         // Example: def prodTag = "0.0"
         prodTag = "${version}"
	 artifact = getArtifactIdFromPom(pom)
       }
      echo "Devtag: ${devTag}"       	
    }
    //end of the checkout stage
    stage('Build App') {
     dir("ParksMap"){ 
       echo "Building version ${devTag}"
       sh "mvn -s ../nexus_settings.xml clean package spring-boot:repackage -DskipTests -Dcom.redhat.xpaas.repo.redhatga"
       echo "Building complete version ${devTag}"
     }
    }
    //End of the build step
    stage('Test App') {
     dir("ParksMap"){ 
      parallel(
       'Unit Tests': {
         stage('Unit Tests') {         
	  echo "Running Unit Tests"
	  sh "mvn -s ../nexus_settings.xml test"
       	  step([$class: 'JUnitResultArchiver', testResults: '**/target/surefire-reports/TEST-*.xml', allowEmptyResults: true])
       }},
       'Code Coverage Tests': {
         stage('Code Coverage Tests'){
	   echo "Running Code Analysis"
	   sh "mvn -s ../nexus_settings.xml test sonar:sonar -Dsonar.host.url=http://sonarqube.${GUID}-sonarqube.svc.cluster.local:9000/ -Dsonar.projectName=${JOB_BASE_NAME} -Dsonar.projectVersion=${devTag}"	
       }}
      )
     }        
    }
    //End of the test stage
    stage('Publish to Nexus') {
      echo "Publish to Nexus"	  
      dir("ParksMap"){
        sh "mvn -s ../nexus_settings.xml deploy -DskipTests=true -DaltDeploymentRepository=nexus::default::http://nexus3.${GUID}-nexus.svc.cluster.local:8081/repository/releases"
      }
    }
    //End of the publish stage
    stage('Build and Tag OpenShift Image') {
     echo "Building OpenShift container image ${artifact}:${devTag}"
     openshift.withCluster() {
      openshift.withProject("${GUID}-parks-dev") {
        openshift.selector("bc", "parksmap").startBuild("--from-file=http://nexus3.${GUID}-nexus.svc.cluster.local:8081/repository/releases/com/openshift/evg/roadshow/${artifact}/${prodTag}/${artifact}-${prodTag}.jar", "--wait=true")
        openshift.tag("${artifact}:latest", "${artifact}:${devTag}")
      }
     }
    }
    //End of the tag image stage
    stage('Deploy to Dev') {
      echo "Deploy container image to Development Project"
      openshift.withCluster() {
       openshift.withProject("${GUID}-parks-dev") {
         openshift.set("image", "dc/parksmap", "parksmap=docker-registry.default.svc:5000/${GUID}-parks-dev/${artifact}:${devTag}")

         // Deploy the application.
         openshift.selector("dc", "parksmap").rollout().latest();

         // Wait for application to be deployed
         def dc = openshift.selector("dc", "parksmap").object()
         def dc_version = dc.status.latestVersion
         def rc = openshift.selector("rc", "parksmap-${dc_version}").object()	

         echo "Waiting for ReplicationController parksmap-${dc_version} to be ready"
         while (rc.spec.replicas != rc.status.readyReplicas) {
           sleep 5
           rc = openshift.selector("rc", "parksmap-${dc_version}").object()
         }
         echo "ReplicationController parksmap-${dc_version} ready"
       }
      }
    }
    //End of the deploy stage
    stage('Copy Image to Nexus Docker Registry') {
      echo "Copy image to Nexus Docker Registry"
      sh "skopeo copy --src-tls-verify=false --dest-tls-verify=false --src-creds openshift:\$(oc whoami -t) --dest-creds admin:admin123 docker://docker-registry.default.svc.cluster.local:5000/${GUID}-parks-dev/${artifact}:${devTag} docker://nexus3-registry.${GUID}-nexus.svc.cluster.local:5000/${artifact}:${devTag}"
    
      openshift.withCluster() {
       openshift.withProject("${GUID}-parks-prod") {
	  openshift.tag("${GUID}-parks-dev/${artifact}:${devTag}", "${GUID}-parks-dev/${artifact}:${prodTag}")
       }
      }
    }
    //End ot the nexus image publish stage
    stage('Blue/Green Production Deployment') {
     echo "Blue/Green Deployment"
    
     openshift.withCluster() {
      openshift.withProject("${GUID}-parks-prod") {
	 activeApp = openshift.selector("route", "parksmap").object().spec.to.name
	 if (activeApp == "parksmap-blue") {
             destApp = "parksmap-green"
         } 

	 echo "Active Application:      " + activeApp
         echo "Destination Application: " + destApp
         
         // Update the Image on the Production Deployment Config
         def dc = openshift.selector("dc/${destApp}").object()
         dc.spec.template.spec.containers[0].image="docker-registry.default.svc:5000/${GUID}-parks-dev/${artifact}:${prodTag}"
         openshift.apply(dc)
         
         // Deploy the inactive application.
         openshift.selector("dc", "${destApp}").rollout().latest();
      
         // Wait for application to be deployed
         def dc_prod = openshift.selector("dc", "${destApp}").object()
         def dc_version = dc_prod.status.latestVersion
         def rc_prod = openshift.selector("rc", "${destApp}-${dc_version}").object()
         echo "Waiting for ${destApp} to be ready"
         while (rc_prod.spec.replicas != rc_prod.status.readyReplicas) {
            sleep 5
            rc_prod = openshift.selector("rc", "${destApp}-${dc_version}").object()
         }
      }
     }
    }
    //End ot the Blue/Green Production Deployment
    stage('Switch over to new Version') {
      echo "Executing production switch"
      openshift.withCluster() {
        openshift.withProject("${GUID}-parks-prod") {
          def route = openshift.selector("route/parksmap").object()
          route.spec.to.name="${destApp}"
          openshift.apply(route)
        }
      }
    }
  }
}

// Convenience Functions to read variables from the pom.xml
// Do not change anything below this line.
def getVersionFromPom(pom) {
  def matcher = readFile(pom) =~ '<version>(.+)</version>'
  matcher ? matcher[0][1] : null
}
def getGroupIdFromPom(pom) {
  def matcher = readFile(pom) =~ '<groupId>(.+)</groupId>'
  matcher ? matcher[0][1] : null
}
def getArtifactIdFromPom(pom) {
  def matcher = readFile(pom) =~ '<artifactId>(.+)</artifactId>'
  matcher ? matcher[0][1] : null
}
